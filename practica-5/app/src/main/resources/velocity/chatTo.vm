#parse("/velocity/layout.vm")
#@mainLayout()
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"/>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0"/>
<button class="chatbot-toggler">
    <span class="material-symbols-rounded">mode_comment</span>
    <span class="material-symbols-outlined">close</span>
</button>
<div class="chatbot">
    <header>
        <h2>Chat $to</h2>
        <span class="close-btn material-symbols-outlined">close</span>
    </header>
    <ul class="chatbox">
    </ul>
    <div class="chat-input">
        <textarea placeholder="Enter a message..." spellcheck="false" required="required"></textarea>
        <span id="send-btn" class="material-symbols-rounded">send</span>
    </div>
</div>
<script>
    //abriendo el objeto para el websocket
    var usuario = "$currentUser";
    var myvar = "$to";
    var webSocket;
    var tiempoReconectar = 5000;
    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input span");

    let userMessage = null; // Variable to store user's message
    const inputInitHeight = chatInput.scrollHeight;

    const createChatLi = (message, className) => {
        // Create a chat <li> element with passed message and className
        const chatLi = document.createElement("li");
        chatLi
                .classList
                .add("chat", `${className}`);
        let chatContent = className === "outgoing"
                ? `<p></p>`
                : `<p></p>`;
        chatLi.innerHTML = chatContent;
        chatLi
                .querySelector("p")
                .textContent = message;
        return chatLi; // return chat <li> element
    };

    const handleChat = () => {
        userMessage = chatInput
                .value
                .trim(); // Get user entered message and remove extra whitespace
        if (!userMessage)
            return;

        // Clear the input textarea and set its height to default
        chatInput.value = "";
        chatInput.style.height = `${inputInitHeight}px`;

        // Append the user's message to the chatbox
        webSocket.send(userMessage);
        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);
    };

    function recibirInformacionServidor(mensaje){
        chatbox.appendChild(createChatLi(mensaje.data, "incoming"));
    }

    function conectar() {
        webSocket = new WebSocket("ws://" + location.hostname + ":" + location.port + `/mensajeServidor/${usuario}/${myvar}`);

        //indicando los eventos:
        webSocket.onmessage = function(data){recibirInformacionServidor(data);};
        webSocket.onopen  = function(e){ console.log("Conectado - status "+this.readyState);};
        webSocket.onclose = function(e){
            console.log("Desconectado - status "+this.readyState);
        };
    }

    function verificarConexion(){
        if(!webSocket || webSocket.readyState == 3){
            conectar();
        }
    }

    setInterval(verificarConexion, tiempoReconectar); //para reconectar.

    chatInput.addEventListener("input", () => {
        // Adjust the height of the input textarea based on its content
        chatInput.style.height = `${inputInitHeight}px`;
        chatInput.style.height = `${chatInput.scrollHeight}px`;
    });

    chatInput.addEventListener("keydown", (e) => {
        // If Enter key is pressed without Shift key and the window width is greater than 800px, handle the
        // chat
        if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
            e.preventDefault();
            handleChat();
        }
    });

    sendChatBtn.addEventListener("click", handleChat);
    closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
    chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
    conectar();
</script>
#end